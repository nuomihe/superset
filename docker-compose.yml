#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
x-superset-image: &superset-image public.ecr.aws/p9r6s5p7/superset:latest
x-superset-node-image: &superset-node-image public.ecr.aws/p9r6s5p7/superset-node:latest
x-superset-depends-on: &superset-depends-on
  - db
  - redis
x-superset-volumes: &superset-volumes
  # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  # - ./docker:/app/docker # missing in both superset and node image, pack /app/docker folder directly
  # - ./superset:/app/superset # included in orign superset image except node image
  # - ./superset-frontend:/app/superset-frontend # included in orign superset image except node image, pack superset-frontend folder into image directly
  - superset_home:/app/superset_home
  # - ./tests:/app/tests # obsolete for production

version: "3.7"
# multiplex existing resource including ecs cluster, vpc, nlb/alb and security group
x-aws-vpc: "vpc-02688d55540858e5c"
# x-aws-cluster: "ClusterName"
# x-aws-loadbalancer: "LoadBalancerName"
# networks:
#   back_tier:
#     external: true
#     name: "sg-1234acbd"

services:
  redis:
    image: redis:latest
    container_name: superset_cache
    ## not support in ecs fargate mapping
    # restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis:/data

  db:
    env_file: docker/.env
    image: postgres:10
    container_name: superset_db
    ## not support in ecs fargate mapping
    # restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - db_home:/var/lib/postgresql/data

  superset:
    env_file: docker/.env
    image: *superset-image
    x-aws-policies:
    - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
    - "arn:aws:iam::aws:policy/AmazonAthenaFullAccess"
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app"]
    ## not support in ecs fargate mapping
    # restart: unless-stopped
    ports:
      - 8088:8088
      ## http protocol with custom ports and get an ALB
      # x-aws-protocol: http
    user: "root"
    depends_on: *superset-depends-on
    volumes: *superset-volumes
    environment:
      CYPRESS_CONFIG: "${CYPRESS_CONFIG}"

  superset-init:
    image: *superset-image
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file: docker/.env
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    environment:
      CYPRESS_CONFIG: "${CYPRESS_CONFIG}"

  superset-node:
    image: *superset-node-image
    container_name: superset_node
    command: ["/app/docker/docker-frontend.sh"]
    env_file: docker/.env
    depends_on: *superset-depends-on
    volumes: *superset-volumes

  superset-worker:
    image: *superset-image
    ## customization option for task size and auto scale policy
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "1"
    #       memory: 2Gb
    #   x-aws-autoscaling:
    #     min: 1
    #     max: 10 #required
    #     cpu: 75
    #     # mem: - mutualy exlusive with cpu
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: docker/.env
    # restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes

  superset-worker-beat:
    image: *superset-image
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file: docker/.env
    # restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes

  ## obsolete for production case
  # superset-tests-worker:
  #   image: *superset-image
  #   container_name: superset_tests_worker
  #   command: ["/app/docker/docker-bootstrap.sh", "worker"]
  #   env_file: docker/.env
  #   environment:
  #     DATABASE_HOST: localhost # db
  #     DATABASE_DB: test # superset
  #     REDIS_CELERY_DB: 2
  #     REDIS_RESULTS_DB: 3
  #     REDIS_HOST: localhost
  #   # network_mode: host
  #   depends_on: *superset-depends-on
  #   user: "root"
  #   volumes: *superset-volumes

  ## customization option for healthcheck path and ssl termination
  # x-aws-cloudformation:
  #   Resources:
  #     WebappTCP80TargetGroup:
  #       Properties:
  #         HealthCheckPath: /health
  #         Matcher:
  #           HttpCode: 200-499
            # Certificates:
            #   - CertificateArn: "arn:aws:acm:certificate/123abc"
            # Protocol: HTTPS

volumes:
  superset_home:
    external: false
    # driver_opts:
    #   uid: 0
    #   gid: 0
    #   backup_policy: ENABLED
    #   lifecycle_policy: AFTER_30_DAYS
    #   performance_mode: maxIO
    #   throughput_mode: provisioned/bursting
    #   provisioned_throughput: 1024
  db_home:
    external: false
  redis:
    external: false
