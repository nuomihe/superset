AWSTemplateFormatVersion: 2010-09-09
Resources:
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project superset-master
      Name: superset-master.local
      Vpc: vpc-0578d86371ca8f854
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      ClusterName: superset-master
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
    Type: AWS::ECS::Cluster
  DbService:
    DependsOn:
    - DbTCP5432Listener
    - DbhomeNFSMountTargetOnSubnet077819a682277ffd4
    - DbhomeNFSMountTargetOnSubnet050ae3d476e465765
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: db
        ContainerPort: 5432
        TargetGroupArn:
          Ref: DbTCP5432TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-077819a682277ffd4
          - subnet-050ae3d476e465765
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - DbServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: db
      TaskDefinition:
        Ref: DbTaskDefinition
    Type: AWS::ECS::Service
  DbServiceDiscoveryEntry:
    Properties:
      Description: '"db" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: db
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  DbTCP5432Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: DbTCP5432TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 5432
      Protocol: TCP
    Type: AWS::ElasticLoadBalancingV2::Listener
  DbTCP5432TargetGroup:
    Properties:
      Port: 5432
      Protocol: TCP
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      TargetType: ip
      VpcId: vpc-0578d86371ca8f854
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  DbTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - cn-north-1.compute.internal
        - superset-master.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: superset-master
        Name: Db_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Db_ResolvConf_InitContainer
        Environment:
        - Name: COMPOSE_PROJECT_NAME
          Value: superset
        - Name: CYPRESS_CONFIG
          Value: "false"
        - Name: DATABASE_DB
          Value: superset
        - Name: DATABASE_DIALECT
          Value: postgresql
        - Name: DATABASE_HOST
          Value: db
        - Name: DATABASE_PASSWORD
          Value: superset
        - Name: DATABASE_PORT
          Value: "5432"
        - Name: DATABASE_USER
          Value: superset
        - Name: FLASK_ENV
          Value: development
        - Name: POSTGRES_DB
          Value: superset
        - Name: POSTGRES_PASSWORD
          Value: superset
        - Name: POSTGRES_USER
          Value: superset
        - Name: PYTHONPATH
          Value: /app/pythonpath:/app/docker/pythonpath_dev
        - Name: REDIS_HOST
          Value: redis
        - Name: REDIS_PORT
          Value: "6379"
        - Name: SUPERSET_ENV
          Value: development
        - Name: SUPERSET_LOAD_EXAMPLES
          Value: "yes"
        - Name: SUPERSET_PORT
          Value: "8088"
        Essential: true
        Image: postgres:10
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: superset-master
        MountPoints:
        - ContainerPath: /var/lib/postgresql/data
          SourceVolume: db_home
        Name: db
        PortMappings:
        - ContainerPort: 5432
          HostPort: 5432
          Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Ref: DbTaskExecutionRole
      Family: superset-master-db
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn:
        Ref: DbTaskRole
      Volumes:
      - EFSVolumeConfiguration:
          AuthorizationConfig:
            AccessPointId:
              Ref: DbhomeAccessPoint
            IAM: ENABLED
          FilesystemId: fs-1940f784
          TransitEncryption: ENABLED
        Name: db_home
    Type: AWS::ECS::TaskDefinition
  DbTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: db
    Type: AWS::IAM::Role
  DbTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - elasticfilesystem:ClientMount
            - elasticfilesystem:ClientWrite
            - elasticfilesystem:ClientRootAccess
            Condition:
              StringEquals:
                elasticfilesystem:AccessPointArn:
                  Ref: DbhomeAccessPoint
            Effect: Allow
            Principal: {}
            Resource:
            - arn:aws-cn:elasticfilesystem:cn-north-1:795474696122:file-system/fs-1940f784
          Version: 2012-10-17
        PolicyName: DbDbhomeVolumeMountPolicy
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: db
    Type: AWS::IAM::Role
  DbhomeAccessPoint:
    Properties:
      AccessPointTags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.volume
        Value: db_home
      - Key: Name
        Value: superset-master_db_home
      FileSystemId: fs-1940f784
    Type: AWS::EFS::AccessPoint
  DbhomeNFSMountTargetOnSubnet050ae3d476e465765:
    Properties:
      FileSystemId: fs-1940f784
      SecurityGroups:
      - Ref: DefaultNetwork
      SubnetId: subnet-050ae3d476e465765
    Type: AWS::EFS::MountTarget
  DbhomeNFSMountTargetOnSubnet077819a682277ffd4:
    Properties:
      FileSystemId: fs-1940f784
      SecurityGroups:
      - Ref: DefaultNetwork
      SubnetId: subnet-077819a682277ffd4
    Type: AWS::EFS::MountTarget
  Default5432Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: db:5432/tcp on default network
      FromPort: 5432
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 5432
    Type: AWS::EC2::SecurityGroupIngress
  Default6379Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: redis:6379/tcp on default network
      FromPort: 6379
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 6379
    Type: AWS::EC2::SecurityGroupIngress
  Default8088Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: superset:8088/tcp on default network
      FromPort: 8088
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 8088
    Type: AWS::EC2::SecurityGroupIngress
  DefaultNetwork:
    Properties:
      GroupDescription: superset-master Security Group for default network
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.network
        Value: default
      VpcId: vpc-0578d86371ca8f854
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  LoadBalancer:
    Properties:
      LoadBalancerAttributes:
      - Key: load_balancing.cross_zone.enabled
        Value: "true"
      Scheme: internet-facing
      Subnets:
      - subnet-077819a682277ffd4
      - subnet-050ae3d476e465765
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      Type: network
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/superset-master
    Type: AWS::Logs::LogGroup
  RedisAccessPoint:
    Properties:
      AccessPointTags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.volume
        Value: redis
      - Key: Name
        Value: superset-master_redis
      FileSystemId: fs-1e40f783
    Type: AWS::EFS::AccessPoint
  RedisNFSMountTargetOnSubnet050ae3d476e465765:
    Properties:
      FileSystemId: fs-1e40f783
      SecurityGroups:
      - Ref: DefaultNetwork
      SubnetId: subnet-050ae3d476e465765
    Type: AWS::EFS::MountTarget
  RedisNFSMountTargetOnSubnet077819a682277ffd4:
    Properties:
      FileSystemId: fs-1e40f783
      SecurityGroups:
      - Ref: DefaultNetwork
      SubnetId: subnet-077819a682277ffd4
    Type: AWS::EFS::MountTarget
  RedisService:
    DependsOn:
    - RedisTCP6379Listener
    - RedisNFSMountTargetOnSubnet077819a682277ffd4
    - RedisNFSMountTargetOnSubnet050ae3d476e465765
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: redis
        ContainerPort: 6379
        TargetGroupArn:
          Ref: RedisTCP6379TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-077819a682277ffd4
          - subnet-050ae3d476e465765
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - RedisServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: redis
      TaskDefinition:
        Ref: RedisTaskDefinition
    Type: AWS::ECS::Service
  RedisServiceDiscoveryEntry:
    Properties:
      Description: '"redis" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: redis
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  RedisTCP6379Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: RedisTCP6379TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 6379
      Protocol: TCP
    Type: AWS::ElasticLoadBalancingV2::Listener
  RedisTCP6379TargetGroup:
    Properties:
      Port: 6379
      Protocol: TCP
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      TargetType: ip
      VpcId: vpc-0578d86371ca8f854
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  RedisTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - cn-north-1.compute.internal
        - superset-master.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: superset-master
        Name: Redis_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Redis_ResolvConf_InitContainer
        Essential: true
        Image: redis:latest
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: superset-master
        MountPoints:
        - ContainerPath: /data
          SourceVolume: redis
        Name: redis
        PortMappings:
        - ContainerPort: 6379
          HostPort: 6379
          Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Ref: RedisTaskExecutionRole
      Family: superset-master-redis
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn:
        Ref: RedisTaskRole
      Volumes:
      - EFSVolumeConfiguration:
          AuthorizationConfig:
            AccessPointId:
              Ref: RedisAccessPoint
            IAM: ENABLED
          FilesystemId: fs-1e40f783
          TransitEncryption: ENABLED
        Name: redis
    Type: AWS::ECS::TaskDefinition
  RedisTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: redis
    Type: AWS::IAM::Role
  RedisTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - elasticfilesystem:ClientMount
            - elasticfilesystem:ClientWrite
            - elasticfilesystem:ClientRootAccess
            Condition:
              StringEquals:
                elasticfilesystem:AccessPointArn:
                  Ref: RedisAccessPoint
            Effect: Allow
            Principal: {}
            Resource:
            - arn:aws-cn:elasticfilesystem:cn-north-1:795474696122:file-system/fs-1e40f783
          Version: 2012-10-17
        PolicyName: RedisRedisVolumeMountPolicy
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: redis
    Type: AWS::IAM::Role
  SupersetService:
    DependsOn:
    - SupersetTCP8088Listener
    - DbService
    - RedisService
    - SupersethomeNFSMountTargetOnSubnet077819a682277ffd4
    - SupersethomeNFSMountTargetOnSubnet050ae3d476e465765
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: superset
        ContainerPort: 8088
        TargetGroupArn:
          Ref: SupersetTCP8088TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-077819a682277ffd4
          - subnet-050ae3d476e465765
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - SupersetServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: superset
      TaskDefinition:
        Ref: SupersetTaskDefinition
    Type: AWS::ECS::Service
  SupersetServiceDiscoveryEntry:
    Properties:
      Description: '"superset" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: superset
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  SupersetTCP8088Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: SupersetTCP8088TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 8088
      Protocol: TCP
    Type: AWS::ElasticLoadBalancingV2::Listener
  SupersetTCP8088TargetGroup:
    Properties:
      Port: 8088
      Protocol: TCP
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      TargetType: ip
      VpcId: vpc-0578d86371ca8f854
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  SupersetTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - cn-north-1.compute.internal
        - superset-master.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: superset-master
        Name: Superset_ResolvConf_InitContainer
      - Command:
        - /app/docker/docker-bootstrap.sh
        - app
        DependsOn:
        - Condition: SUCCESS
          ContainerName: Superset_ResolvConf_InitContainer
        Environment:
        - Name: COMPOSE_PROJECT_NAME
          Value: superset
        - Name: CYPRESS_CONFIG
        - Name: DATABASE_DB
          Value: superset
        - Name: DATABASE_DIALECT
          Value: postgresql
        - Name: DATABASE_HOST
          Value: db
        - Name: DATABASE_PASSWORD
          Value: superset
        - Name: DATABASE_PORT
          Value: "5432"
        - Name: DATABASE_USER
          Value: superset
        - Name: FLASK_ENV
          Value: development
        - Name: POSTGRES_DB
          Value: superset
        - Name: POSTGRES_PASSWORD
          Value: superset
        - Name: POSTGRES_USER
          Value: superset
        - Name: PYTHONPATH
          Value: /app/pythonpath:/app/docker/pythonpath_dev
        - Name: REDIS_HOST
          Value: redis
        - Name: REDIS_PORT
          Value: "6379"
        - Name: SUPERSET_ENV
          Value: development
        - Name: SUPERSET_LOAD_EXAMPLES
          Value: "yes"
        - Name: SUPERSET_PORT
          Value: "8088"
        Essential: true
        Image: public.ecr.aws/p9r6s5p7/superset:latest
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: superset-master
        MountPoints:
        - ContainerPath: /app/superset_home
          SourceVolume: superset_home
        Name: superset
        PortMappings:
        - ContainerPort: 8088
          HostPort: 8088
          Protocol: tcp
        User: root
      Cpu: "256"
      ExecutionRoleArn:
        Ref: SupersetTaskExecutionRole
      Family: superset-master-superset
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn:
        Ref: SupersetTaskRole
      Volumes:
      - EFSVolumeConfiguration:
          AuthorizationConfig:
            AccessPointId:
              Ref: SupersethomeAccessPoint
            IAM: ENABLED
          FilesystemId: fs-1540f788
          TransitEncryption: ENABLED
        Name: superset_home
    Type: AWS::ECS::TaskDefinition
  SupersetTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: superset
    Type: AWS::IAM::Role
  SupersetTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - elasticfilesystem:ClientMount
            - elasticfilesystem:ClientWrite
            - elasticfilesystem:ClientRootAccess
            Condition:
              StringEquals:
                elasticfilesystem:AccessPointArn:
                  Ref: SupersethomeAccessPoint
            Effect: Allow
            Principal: {}
            Resource:
            - arn:aws-cn:elasticfilesystem:cn-north-1:795474696122:file-system/fs-1540f788
          Version: 2012-10-17
        PolicyName: SupersetSupersethomeVolumeMountPolicy
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: superset
    Type: AWS::IAM::Role
  SupersethomeAccessPoint:
    Properties:
      AccessPointTags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.volume
        Value: superset_home
      - Key: Name
        Value: superset-master_superset_home
      FileSystemId: fs-1540f788
    Type: AWS::EFS::AccessPoint
  SupersethomeNFSMountTargetOnSubnet050ae3d476e465765:
    Properties:
      FileSystemId: fs-1540f788
      SecurityGroups:
      - Ref: DefaultNetwork
      SubnetId: subnet-050ae3d476e465765
    Type: AWS::EFS::MountTarget
  SupersethomeNFSMountTargetOnSubnet077819a682277ffd4:
    Properties:
      FileSystemId: fs-1540f788
      SecurityGroups:
      - Ref: DefaultNetwork
      SubnetId: subnet-077819a682277ffd4
    Type: AWS::EFS::MountTarget
  SupersetinitService:
    DependsOn:
    - DbService
    - RedisService
    - SupersethomeNFSMountTargetOnSubnet077819a682277ffd4
    - SupersethomeNFSMountTargetOnSubnet050ae3d476e465765
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-077819a682277ffd4
          - subnet-050ae3d476e465765
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - SupersetinitServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: superset-init
      TaskDefinition:
        Ref: SupersetinitTaskDefinition
    Type: AWS::ECS::Service
  SupersetinitServiceDiscoveryEntry:
    Properties:
      Description: '"superset-init" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: superset-init
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  SupersetinitTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - cn-north-1.compute.internal
        - superset-master.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: superset-master
        Name: Supersetinit_ResolvConf_InitContainer
      - Command:
        - /app/docker/docker-init.sh
        DependsOn:
        - Condition: SUCCESS
          ContainerName: Supersetinit_ResolvConf_InitContainer
        Environment:
        - Name: COMPOSE_PROJECT_NAME
          Value: superset
        - Name: CYPRESS_CONFIG
        - Name: DATABASE_DB
          Value: superset
        - Name: DATABASE_DIALECT
          Value: postgresql
        - Name: DATABASE_HOST
          Value: db
        - Name: DATABASE_PASSWORD
          Value: superset
        - Name: DATABASE_PORT
          Value: "5432"
        - Name: DATABASE_USER
          Value: superset
        - Name: FLASK_ENV
          Value: development
        - Name: POSTGRES_DB
          Value: superset
        - Name: POSTGRES_PASSWORD
          Value: superset
        - Name: POSTGRES_USER
          Value: superset
        - Name: PYTHONPATH
          Value: /app/pythonpath:/app/docker/pythonpath_dev
        - Name: REDIS_HOST
          Value: redis
        - Name: REDIS_PORT
          Value: "6379"
        - Name: SUPERSET_ENV
          Value: development
        - Name: SUPERSET_LOAD_EXAMPLES
          Value: "yes"
        - Name: SUPERSET_PORT
          Value: "8088"
        Essential: true
        Image: public.ecr.aws/p9r6s5p7/superset:latest
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: superset-master
        MountPoints:
        - ContainerPath: /app/superset_home
          SourceVolume: superset_home
        Name: superset-init
        User: root
      Cpu: "256"
      ExecutionRoleArn:
        Ref: SupersetinitTaskExecutionRole
      Family: superset-master-superset-init
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn:
        Ref: SupersetinitTaskRole
      Volumes:
      - EFSVolumeConfiguration:
          AuthorizationConfig:
            AccessPointId:
              Ref: SupersethomeAccessPoint
            IAM: ENABLED
          FilesystemId: fs-1540f788
          TransitEncryption: ENABLED
        Name: superset_home
    Type: AWS::ECS::TaskDefinition
  SupersetinitTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: superset-init
    Type: AWS::IAM::Role
  SupersetinitTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - elasticfilesystem:ClientMount
            - elasticfilesystem:ClientWrite
            - elasticfilesystem:ClientRootAccess
            Condition:
              StringEquals:
                elasticfilesystem:AccessPointArn:
                  Ref: SupersethomeAccessPoint
            Effect: Allow
            Principal: {}
            Resource:
            - arn:aws-cn:elasticfilesystem:cn-north-1:795474696122:file-system/fs-1540f788
          Version: 2012-10-17
        PolicyName: SupersetinitSupersethomeVolumeMountPolicy
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: superset-init
    Type: AWS::IAM::Role
  SupersetnodeService:
    DependsOn:
    - RedisService
    - DbService
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-077819a682277ffd4
          - subnet-050ae3d476e465765
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - SupersetnodeServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: superset-node
      TaskDefinition:
        Ref: SupersetnodeTaskDefinition
    Type: AWS::ECS::Service
  SupersetnodeServiceDiscoveryEntry:
    Properties:
      Description: '"superset-node" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: superset-node
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  SupersetnodeTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - cn-north-1.compute.internal
        - superset-master.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: superset-master
        Name: Supersetnode_ResolvConf_InitContainer
      - Command:
        - /app/docker/docker-frontend.sh
        DependsOn:
        - Condition: SUCCESS
          ContainerName: Supersetnode_ResolvConf_InitContainer
        Environment:
        - Name: COMPOSE_PROJECT_NAME
          Value: superset
        - Name: CYPRESS_CONFIG
          Value: "false"
        - Name: DATABASE_DB
          Value: superset
        - Name: DATABASE_DIALECT
          Value: postgresql
        - Name: DATABASE_HOST
          Value: db
        - Name: DATABASE_PASSWORD
          Value: superset
        - Name: DATABASE_PORT
          Value: "5432"
        - Name: DATABASE_USER
          Value: superset
        - Name: FLASK_ENV
          Value: development
        - Name: POSTGRES_DB
          Value: superset
        - Name: POSTGRES_PASSWORD
          Value: superset
        - Name: POSTGRES_USER
          Value: superset
        - Name: PYTHONPATH
          Value: /app/pythonpath:/app/docker/pythonpath_dev
        - Name: REDIS_HOST
          Value: redis
        - Name: REDIS_PORT
          Value: "6379"
        - Name: SUPERSET_ENV
          Value: development
        - Name: SUPERSET_LOAD_EXAMPLES
          Value: "yes"
        - Name: SUPERSET_PORT
          Value: "8088"
        Essential: true
        Image: public.ecr.aws/p9r6s5p7/superset-node:latest
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: superset-master
        Name: superset-node
      Cpu: "256"
      ExecutionRoleArn:
        Ref: SupersetnodeTaskExecutionRole
      Family: superset-master-superset-node
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  SupersetnodeTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: superset-node
    Type: AWS::IAM::Role
  SupersetworkerService:
    DependsOn:
    - DbService
    - RedisService
    - SupersethomeNFSMountTargetOnSubnet077819a682277ffd4
    - SupersethomeNFSMountTargetOnSubnet050ae3d476e465765
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-077819a682277ffd4
          - subnet-050ae3d476e465765
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - SupersetworkerServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: superset-worker
      TaskDefinition:
        Ref: SupersetworkerTaskDefinition
    Type: AWS::ECS::Service
  SupersetworkerServiceDiscoveryEntry:
    Properties:
      Description: '"superset-worker" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: superset-worker
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  SupersetworkerTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - cn-north-1.compute.internal
        - superset-master.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: superset-master
        Name: Supersetworker_ResolvConf_InitContainer
      - Command:
        - /app/docker/docker-bootstrap.sh
        - worker
        DependsOn:
        - Condition: SUCCESS
          ContainerName: Supersetworker_ResolvConf_InitContainer
        Environment:
        - Name: COMPOSE_PROJECT_NAME
          Value: superset
        - Name: CYPRESS_CONFIG
          Value: "false"
        - Name: DATABASE_DB
          Value: superset
        - Name: DATABASE_DIALECT
          Value: postgresql
        - Name: DATABASE_HOST
          Value: db
        - Name: DATABASE_PASSWORD
          Value: superset
        - Name: DATABASE_PORT
          Value: "5432"
        - Name: DATABASE_USER
          Value: superset
        - Name: FLASK_ENV
          Value: development
        - Name: POSTGRES_DB
          Value: superset
        - Name: POSTGRES_PASSWORD
          Value: superset
        - Name: POSTGRES_USER
          Value: superset
        - Name: PYTHONPATH
          Value: /app/pythonpath:/app/docker/pythonpath_dev
        - Name: REDIS_HOST
          Value: redis
        - Name: REDIS_PORT
          Value: "6379"
        - Name: SUPERSET_ENV
          Value: development
        - Name: SUPERSET_LOAD_EXAMPLES
          Value: "yes"
        - Name: SUPERSET_PORT
          Value: "8088"
        Essential: true
        Image: public.ecr.aws/p9r6s5p7/superset:latest
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: superset-master
        MountPoints:
        - ContainerPath: /app/superset_home
          SourceVolume: superset_home
        Name: superset-worker
        User: root
      Cpu: "256"
      ExecutionRoleArn:
        Ref: SupersetworkerTaskExecutionRole
      Family: superset-master-superset-worker
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn:
        Ref: SupersetworkerTaskRole
      Volumes:
      - EFSVolumeConfiguration:
          AuthorizationConfig:
            AccessPointId:
              Ref: SupersethomeAccessPoint
            IAM: ENABLED
          FilesystemId: fs-1540f788
          TransitEncryption: ENABLED
        Name: superset_home
    Type: AWS::ECS::TaskDefinition
  SupersetworkerTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: superset-worker
    Type: AWS::IAM::Role
  SupersetworkerTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - elasticfilesystem:ClientMount
            - elasticfilesystem:ClientWrite
            - elasticfilesystem:ClientRootAccess
            Condition:
              StringEquals:
                elasticfilesystem:AccessPointArn:
                  Ref: SupersethomeAccessPoint
            Effect: Allow
            Principal: {}
            Resource:
            - arn:aws-cn:elasticfilesystem:cn-north-1:795474696122:file-system/fs-1540f788
          Version: 2012-10-17
        PolicyName: SupersetworkerSupersethomeVolumeMountPolicy
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: superset-worker
    Type: AWS::IAM::Role
  SupersetworkerbeatService:
    DependsOn:
    - DbService
    - RedisService
    - SupersethomeNFSMountTargetOnSubnet077819a682277ffd4
    - SupersethomeNFSMountTargetOnSubnet050ae3d476e465765
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-077819a682277ffd4
          - subnet-050ae3d476e465765
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - SupersetworkerbeatServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: superset-worker-beat
      TaskDefinition:
        Ref: SupersetworkerbeatTaskDefinition
    Type: AWS::ECS::Service
  SupersetworkerbeatServiceDiscoveryEntry:
    Properties:
      Description: '"superset-worker-beat" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: superset-worker-beat
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  SupersetworkerbeatTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - cn-north-1.compute.internal
        - superset-master.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: superset-master
        Name: Supersetworkerbeat_ResolvConf_InitContainer
      - Command:
        - /app/docker/docker-bootstrap.sh
        - beat
        DependsOn:
        - Condition: SUCCESS
          ContainerName: Supersetworkerbeat_ResolvConf_InitContainer
        Environment:
        - Name: COMPOSE_PROJECT_NAME
          Value: superset
        - Name: CYPRESS_CONFIG
          Value: "false"
        - Name: DATABASE_DB
          Value: superset
        - Name: DATABASE_DIALECT
          Value: postgresql
        - Name: DATABASE_HOST
          Value: db
        - Name: DATABASE_PASSWORD
          Value: superset
        - Name: DATABASE_PORT
          Value: "5432"
        - Name: DATABASE_USER
          Value: superset
        - Name: FLASK_ENV
          Value: development
        - Name: POSTGRES_DB
          Value: superset
        - Name: POSTGRES_PASSWORD
          Value: superset
        - Name: POSTGRES_USER
          Value: superset
        - Name: PYTHONPATH
          Value: /app/pythonpath:/app/docker/pythonpath_dev
        - Name: REDIS_HOST
          Value: redis
        - Name: REDIS_PORT
          Value: "6379"
        - Name: SUPERSET_ENV
          Value: development
        - Name: SUPERSET_LOAD_EXAMPLES
          Value: "yes"
        - Name: SUPERSET_PORT
          Value: "8088"
        Essential: true
        Image: public.ecr.aws/p9r6s5p7/superset:latest
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: superset-master
        MountPoints:
        - ContainerPath: /app/superset_home
          SourceVolume: superset_home
        Name: superset-worker-beat
        User: root
      Cpu: "256"
      ExecutionRoleArn:
        Ref: SupersetworkerbeatTaskExecutionRole
      Family: superset-master-superset-worker-beat
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn:
        Ref: SupersetworkerbeatTaskRole
      Volumes:
      - EFSVolumeConfiguration:
          AuthorizationConfig:
            AccessPointId:
              Ref: SupersethomeAccessPoint
            IAM: ENABLED
          FilesystemId: fs-1540f788
          TransitEncryption: ENABLED
        Name: superset_home
    Type: AWS::ECS::TaskDefinition
  SupersetworkerbeatTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: superset-worker-beat
    Type: AWS::IAM::Role
  SupersetworkerbeatTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - elasticfilesystem:ClientMount
            - elasticfilesystem:ClientWrite
            - elasticfilesystem:ClientRootAccess
            Condition:
              StringEquals:
                elasticfilesystem:AccessPointArn:
                  Ref: SupersethomeAccessPoint
            Effect: Allow
            Principal: {}
            Resource:
            - arn:aws-cn:elasticfilesystem:cn-north-1:795474696122:file-system/fs-1540f788
          Version: 2012-10-17
        PolicyName: SupersetworkerbeatSupersethomeVolumeMountPolicy
      Tags:
      - Key: com.docker.compose.project
        Value: superset-master
      - Key: com.docker.compose.service
        Value: superset-worker-beat
    Type: AWS::IAM::Role